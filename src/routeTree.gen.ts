/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsPromptTemplatesImport } from './routes/settings/prompt-templates'
import { Route as SettingsLanguageModelImport } from './routes/settings/language-model'
import { Route as SettingsAppearanceImport } from './routes/settings/appearance'

// Create/Update Routes

const SettingsRouteRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsPromptTemplatesRoute = SettingsPromptTemplatesImport.update({
  id: '/prompt-templates',
  path: '/prompt-templates',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsLanguageModelRoute = SettingsLanguageModelImport.update({
  id: '/language-model',
  path: '/language-model',
  getParentRoute: () => SettingsRouteRoute,
} as any)

const SettingsAppearanceRoute = SettingsAppearanceImport.update({
  id: '/appearance',
  path: '/appearance',
  getParentRoute: () => SettingsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/settings/appearance': {
      id: '/settings/appearance'
      path: '/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof SettingsAppearanceImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/language-model': {
      id: '/settings/language-model'
      path: '/language-model'
      fullPath: '/settings/language-model'
      preLoaderRoute: typeof SettingsLanguageModelImport
      parentRoute: typeof SettingsRouteImport
    }
    '/settings/prompt-templates': {
      id: '/settings/prompt-templates'
      path: '/prompt-templates'
      fullPath: '/settings/prompt-templates'
      preLoaderRoute: typeof SettingsPromptTemplatesImport
      parentRoute: typeof SettingsRouteImport
    }
  }
}

// Create and export the route tree

interface SettingsRouteRouteChildren {
  SettingsAppearanceRoute: typeof SettingsAppearanceRoute
  SettingsLanguageModelRoute: typeof SettingsLanguageModelRoute
  SettingsPromptTemplatesRoute: typeof SettingsPromptTemplatesRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsAppearanceRoute: SettingsAppearanceRoute,
  SettingsLanguageModelRoute: SettingsLanguageModelRoute,
  SettingsPromptTemplatesRoute: SettingsPromptTemplatesRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/language-model': typeof SettingsLanguageModelRoute
  '/settings/prompt-templates': typeof SettingsPromptTemplatesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/language-model': typeof SettingsLanguageModelRoute
  '/settings/prompt-templates': typeof SettingsPromptTemplatesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/language-model': typeof SettingsLanguageModelRoute
  '/settings/prompt-templates': typeof SettingsPromptTemplatesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/settings/appearance'
    | '/settings/language-model'
    | '/settings/prompt-templates'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings'
    | '/settings/appearance'
    | '/settings/language-model'
    | '/settings/prompt-templates'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/settings/appearance'
    | '/settings/language-model'
    | '/settings/prompt-templates'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings/route.tsx",
      "children": [
        "/settings/appearance",
        "/settings/language-model",
        "/settings/prompt-templates"
      ]
    },
    "/settings/appearance": {
      "filePath": "settings/appearance.tsx",
      "parent": "/settings"
    },
    "/settings/language-model": {
      "filePath": "settings/language-model.tsx",
      "parent": "/settings"
    },
    "/settings/prompt-templates": {
      "filePath": "settings/prompt-templates.tsx",
      "parent": "/settings"
    }
  }
}
ROUTE_MANIFEST_END */
